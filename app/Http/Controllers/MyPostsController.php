<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Post;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class MyPostsController extends Controller
{
    public function index(Request $request)
    {
        // Get user's posts with filters
        $query = Post::where('user_id', Auth::id());

        // Apply source filter if provided
        if ($request->has('source') && in_array($request->source, ['generated', 'repurposed'])) {
            $query->where('source', $request->source);
        }

        // Apply type filter if provided
        if ($request->has('type') && in_array($request->type, ['linkedin', 'twitter', 'blog'])) {
            $query->whereHas('postType', function($q) use ($request) {
                $q->where('slug', $request->type);
            });
        }

        // Apply period filter if provided
        if ($request->has('period') && in_array($request->period, ['7', '30', '90'])) {
            $query->where('created_at', '>=', Carbon::now()->subDays($request->period));
        }

        // Get posts with pagination
        $posts = $query->orderBy('created_at', 'desc')->paginate(10);

        // Get unique keywords used by the user
        $keywords = Post::where('user_id', Auth::id())
            ->whereNotNull('keywords')
            ->pluck('keywords')
            ->flatMap(function ($keywords) {
                return explode(',', $keywords);
            })
            ->map(function ($keyword) {
                return trim($keyword);
            })
            ->unique()
            ->values()
            ->all();

        // Get user's full name
        $user = User::find(Auth::id());
        $fullName = $user->full_name ?? $user->name;

        return view('my-posts.index', compact('posts', 'keywords', 'fullName'));
    }

    public function show($id)
    {
        $post = Post::where('user_id', Auth::id())
            ->findOrFail($id);
            
        $user = User::find(Auth::id());
        $fullName = $user->full_name ?? $user->name;

        return view('my-posts.show', compact('post', 'fullName'));
    }

    public function copyToClipboard($id)
    {
        $post = Post::where('user_id', Auth::id())
            ->findOrFail($id);
            
        // Add footer note with hyperlink
        $content = $post->generated_content . "\n\n" . 
                  "This post is generated by NextPostAI (nextpostai.pandeyamit.com)";
            
        return response()->json([
            'success' => true,
            'content' => $content
        ]);
    }

    public function shareToLinkedIn($id)
    {
        $post = Post::where('user_id', Auth::id())
            ->findOrFail($id);
            
        // LinkedIn sharing URL
        $linkedInUrl = 'https://www.linkedin.com/sharing/share-offsite/?' . http_build_query([
            'url' => route('my-posts.show', $post->id),
            'title' => 'Check out my post',
            'summary' => substr($post->generated_content, 0, 256)
        ]);

        return redirect($linkedInUrl);
    }
}
